var _user$project$Main$instructions = A2(
	_elm_lang$html$Html$ul,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'listStyle', _1: 'none'},
				_1: {
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'color', _1: '#ddd'},
					_1: {ctor: '[]'}
				}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Enter notes in the format: CW3 where ...'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('C is the name of the note to be played (sharps are allowed but no flats yet)'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('W is the note duration, where W = whole, H = eigth, Q = quarter, E = eigth, & S = sixteenth'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('3 equals octave to be played (range of 1 - 9)'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$tempo = function (bpm) {
	return (_elm_lang$core$Basics$toFloat(60) / _elm_lang$core$Basics$toFloat(bpm)) * 0.5;
};
var _user$project$Main$frequencies = function (note) {
	var _p0 = note;
	switch (_p0) {
		case 'c':
			return 130.81;
		case 'c#':
			return 139.0;
		case 'd':
			return 146.83;
		case 'd#':
			return 156.0;
		case 'e':
			return 164.81;
		case 'f':
			return 174.61;
		case 'f#':
			return 185.0;
		case 'g':
			return 196.0;
		case 'g#':
			return 208.0;
		case 'a':
			return 220.0;
		case 'a#':
			return 233.0;
		case 'b':
			return 246.94;
		case 'r':
			return 0.0;
		default:
			return 0.0;
	}
};
var _user$project$Main$octave = function (num) {
	var _p1 = num;
	if (_p1 === 1) {
		return 1;
	} else {
		return Math.pow(2, num - 1);
	}
};
var _user$project$Main$sustain = function (duration) {
	var _p2 = duration;
	switch (_p2) {
		case 'w':
			return 4.0;
		case 'h':
			return 2.0;
		case 'q':
			return 1.0;
		case 'e':
			return 0.5;
		case 's':
			return 0.25;
		default:
			return 0.0;
	}
};
var _user$project$Main$model = {
	initialNotes: '',
	notesToSend: {ctor: '[]'},
	index: 0,
	bpm: 80,
	waveType: 'square',
	numberOfInputs: 1
};
var _user$project$Main$init = {ctor: '_Tuple2', _0: _user$project$Main$model, _1: _elm_lang$core$Platform_Cmd$none};
var _user$project$Main$send = _elm_lang$core$Native_Platform.outgoingPort(
	'send',
	function (v) {
		return {
			note: (v.note.ctor === 'Nothing') ? null : {hz: v.note._0.hz, duration: v.note._0.duration, octave: v.note._0.octave},
			tempo: v.tempo,
			waveType: v.waveType
		};
	});
var _user$project$Main$Model = F6(
	function (a, b, c, d, e, f) {
		return {initialNotes: a, notesToSend: b, index: c, bpm: d, waveType: e, numberOfInputs: f};
	});
var _user$project$Main$Note = F3(
	function (a, b, c) {
		return {hz: a, duration: b, octave: c};
	});
var _user$project$Main$noteSorter = function (string) {
	var _p3 = _elm_lang$core$String$length(string);
	switch (_p3) {
		case 3:
			return A3(
				_user$project$Main$Note,
				_user$project$Main$frequencies(
					A3(_elm_lang$core$String$slice, 0, 1, string)),
				_user$project$Main$sustain(
					A3(_elm_lang$core$String$slice, 1, 2, string)),
				_user$project$Main$octave(
					A2(
						_elm_lang$core$Result$withDefault,
						0,
						_elm_lang$core$String$toInt(
							A3(_elm_lang$core$String$slice, 2, 3, string)))));
		case 4:
			return A3(
				_user$project$Main$Note,
				_user$project$Main$frequencies(
					A3(_elm_lang$core$String$slice, 0, 2, string)),
				_user$project$Main$sustain(
					A3(_elm_lang$core$String$slice, 2, 3, string)),
				_user$project$Main$octave(
					A2(
						_elm_lang$core$Result$withDefault,
						0,
						_elm_lang$core$String$toInt(
							A3(_elm_lang$core$String$slice, 3, 4, string)))));
		default:
			return A3(_user$project$Main$Note, 0.0, 0.0, 0);
	}
};
var _user$project$Main$parseNotes = function (string) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Main$noteSorter,
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.match;
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([a-g,r]+#|[a-g,r])([whqes])(\\d)'),
				_elm_lang$core$String$toLower(string))));
};
var _user$project$Main$PlayBundle = F3(
	function (a, b, c) {
		return {note: a, tempo: b, waveType: c};
	});
var _user$project$Main$ChangeWaveType = function (a) {
	return {ctor: 'ChangeWaveType', _0: a};
};
var _user$project$Main$waveSelectMenu = A2(
	_elm_lang$html$Html$select,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ChangeWaveType),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'margin', _1: ' 1rem 20px'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'width', _1: '15%'},
						_1: {
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'textTransform', _1: 'uppercase'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'color', _1: '#ddd'},
									_1: {ctor: '[]'}
								}
							}
						}
					}
				}),
			_1: {ctor: '[]'}
		}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$option,
			{
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$value('square'),
				_1: {ctor: '[]'}
			},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('square'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$option,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value('sine'),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('sine'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$option,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$value('triangle'),
						_1: {ctor: '[]'}
					},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('triangle'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$option,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$value('sawtooth'),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('sawtooth'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$ChangeBPM = function (a) {
	return {ctor: 'ChangeBPM', _0: a};
};
var _user$project$Main$bpmInput = A2(
	_elm_lang$html$Html$input,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$type_('number'),
		_1: {
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$placeholder('BPM'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$ChangeBPM),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$value(
						_elm_lang$core$Basics$toString(_user$project$Main$model.bpm)),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$style(
							{
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'margin', _1: ' 1rem 20px'},
								_1: {
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'width', _1: '15%'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'textTransform', _1: 'uppercase'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'display', _1: 'inline-block'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: '#ddd'},
												_1: {ctor: '[]'}
											}
										}
									}
								}
							}),
						_1: {ctor: '[]'}
					}
				}
			}
		}
	},
	{
		ctor: '::',
		_0: _elm_lang$html$Html$text('Beats per minute'),
		_1: {ctor: '[]'}
	});
var _user$project$Main$SendNotes = {ctor: 'SendNotes'};
var _user$project$Main$subscriptions = function (model) {
	if ((_elm_lang$core$Native_Utils.cmp(model.index, 0) > 0) && (_elm_lang$core$Native_Utils.cmp(
		model.index,
		_elm_lang$core$List$length(model.notesToSend)) < 0)) {
		var speed = _user$project$Main$tempo(model.bpm);
		var sustain = A2(
			_elm_lang$core$Maybe$withDefault,
			1,
			A2(
				_elm_lang$core$Maybe$map,
				function (_) {
					return _.duration;
				},
				A2(_elm_community$list_extra$List_Extra$getAt, model.index - 1, model.notesToSend)));
		return A2(
			_elm_lang$core$Time$every,
			(sustain * speed) * _elm_lang$core$Time$second,
			_elm_lang$core$Basics$always(_user$project$Main$SendNotes));
	} else {
		return _elm_lang$core$Platform_Sub$none;
	}
};
var _user$project$Main$ResetIndex = {ctor: 'ResetIndex'};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'AcceptNotes':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							initialNotes: _p4._0,
							notesToSend: _user$project$Main$parseNotes(model.initialNotes)
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'Play':
				return A2(
					_ccapndave$elm_update_extra$Update_Extra_Infix_ops[':>'],
					A2(
						_ccapndave$elm_update_extra$Update_Extra_Infix_ops[':>'],
						{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none},
						_user$project$Main$update(_user$project$Main$ResetIndex)),
					_user$project$Main$update(_user$project$Main$SendNotes));
			case 'ResetIndex':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{index: 0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			case 'SendNotes':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{index: model.index + 1}),
					_1: _user$project$Main$send(
						A3(
							_user$project$Main$PlayBundle,
							A2(_elm_community$list_extra$List_Extra$getAt, model.index, model.notesToSend),
							_user$project$Main$tempo(model.bpm),
							model.waveType))
				};
			case 'ChangeBPM':
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{
							bpm: A2(
								_elm_lang$core$Result$withDefault,
								128,
								_elm_lang$core$String$toInt(_p4._0))
						}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
			default:
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						model,
						{waveType: _p4._0}),
					_1: _elm_lang$core$Platform_Cmd$none
				};
		}
	});
var _user$project$Main$Play = {ctor: 'Play'};
var _user$project$Main$AcceptNotes = function (a) {
	return {ctor: 'AcceptNotes', _0: a};
};
var _user$project$Main$noteInputField = function (idName) {
	return A2(
		_elm_lang$html$Html$input,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$type_('text'),
			_1: {
				ctor: '::',
				_0: _elm_lang$html$Html_Attributes$id(idName),
				_1: {
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$placeholder('Enter notes to play'),
					_1: {
						ctor: '::',
						_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$AcceptNotes),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$style(
								{
									ctor: '::',
									_0: {ctor: '_Tuple2', _0: 'margin', _1: ' 0.5rem 20px'},
									_1: {
										ctor: '::',
										_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
										_1: {
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'textTransform', _1: 'uppercase'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'color', _1: '#ddd'},
												_1: {ctor: '[]'}
											}
										}
									}
								}),
							_1: {ctor: '[]'}
						}
					}
				}
			}
		},
		{ctor: '[]'});
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'textAlign', _1: 'center'},
					_1: {
						ctor: '::',
						_0: {ctor: '_Tuple2', _0: 'color', _1: '#ddd'},
						_1: {ctor: '[]'}
					}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'textDecoration', _1: 'underline'},
							_1: {
								ctor: '::',
								_0: {ctor: '_Tuple2', _0: 'marginBottom', _1: '2rem'},
								_1: {ctor: '[]'}
							}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('COUNTERPOINT.ELM'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: _user$project$Main$noteInputField('1'),
				_1: {
					ctor: '::',
					_0: _user$project$Main$noteInputField('2'),
					_1: {
						ctor: '::',
						_0: _user$project$Main$bpmInput,
						_1: {
							ctor: '::',
							_0: _user$project$Main$waveSelectMenu,
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$button,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$Play),
										_1: {
											ctor: '::',
											_0: _elm_lang$html$Html_Attributes$style(
												{
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'backgroundColor', _1: '#ddd'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: '#333'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'border', _1: '1px solid #333'},
															_1: {ctor: '[]'}
														}
													}
												}),
											_1: {ctor: '[]'}
										}
									},
									{
										ctor: '::',
										_0: _elm_lang$html$Html$text('Play Notes'),
										_1: {ctor: '[]'}
									}),
								_1: {
									ctor: '::',
									_0: A2(
										_elm_lang$html$Html$div,
										{ctor: '[]'},
										{
											ctor: '::',
											_0: _elm_lang$html$Html$text('NOTES TO BE PLAYED'),
											_1: {ctor: '[]'}
										}),
									_1: {
										ctor: '::',
										_0: A2(
											_elm_lang$html$Html$div,
											{
												ctor: '::',
												_0: _elm_lang$html$Html_Attributes$style(
													{
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
														_1: {
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.75 rem'},
															_1: {ctor: '[]'}
														}
													}),
												_1: {ctor: '[]'}
											},
											{
												ctor: '::',
												_0: _elm_lang$html$Html$text(
													_elm_lang$core$Basics$toString(model.notesToSend)),
												_1: {ctor: '[]'}
											}),
										_1: {
											ctor: '::',
											_0: A2(
												_elm_lang$html$Html$div,
												{
													ctor: '::',
													_0: _elm_lang$html$Html_Attributes$style(
														{
															ctor: '::',
															_0: {ctor: '_Tuple2', _0: 'margin', _1: '1rem auto'},
															_1: {ctor: '[]'}
														}),
													_1: {ctor: '[]'}
												},
												{
													ctor: '::',
													_0: _user$project$Main$instructions,
													_1: {ctor: '[]'}
												}),
											_1: {ctor: '[]'}
										}
									}
								}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$program(
	{init: _user$project$Main$init, update: _user$project$Main$update, view: _user$project$Main$view, subscriptions: _user$project$Main$subscriptions})();
