var _user$project$Main$instructions = A2(
	_elm_lang$html$Html$ul,
	{
		ctor: '::',
		_0: _elm_lang$html$Html_Attributes$style(
			{
				ctor: '::',
				_0: {ctor: '_Tuple2', _0: 'listStyle', _1: 'none'},
				_1: {ctor: '[]'}
			}),
		_1: {ctor: '[]'}
	},
	{
		ctor: '::',
		_0: A2(
			_elm_lang$html$Html$li,
			{ctor: '[]'},
			{
				ctor: '::',
				_0: _elm_lang$html$Html$text('Enter notes in the format: CW3 where ...'),
				_1: {ctor: '[]'}
			}),
		_1: {
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$li,
				{ctor: '[]'},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('C is the name of the note to be played (sharps are allowed but no flats yet)'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$li,
					{ctor: '[]'},
					{
						ctor: '::',
						_0: _elm_lang$html$Html$text('W is the note duration, where W = whole, H = eigth, Q = quarter, E = eigth, & S = sixteenth'),
						_1: {ctor: '[]'}
					}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$li,
						{ctor: '[]'},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('3 equals octave to be played (range of 1 - 9)'),
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				}
			}
		}
	});
var _user$project$Main$frequencies = function (note) {
	var _p0 = note;
	switch (_p0) {
		case 'c':
			return 130.81;
		case 'c#':
			return 139.0;
		case 'd':
			return 146.83;
		case 'd#':
			return 156.0;
		case 'e':
			return 164.81;
		case 'f':
			return 174.61;
		case 'f#':
			return 185.0;
		case 'g':
			return 196.0;
		case 'g#':
			return 208.0;
		case 'a':
			return 220.0;
		case 'a#':
			return 233.0;
		case 'b':
			return 246.94;
		case 'r':
			return 0.0;
		default:
			return 0.0;
	}
};
var _user$project$Main$octave = function (num) {
	var _p1 = num;
	if (_p1 === 1) {
		return 1;
	} else {
		return 2 * (num - 1);
	}
};
var _user$project$Main$sustain = function (duration) {
	var _p2 = duration;
	switch (_p2) {
		case 'w':
			return 4.0;
		case 'h':
			return 2.0;
		case 'q':
			return 1.0;
		case 'e':
			return 0.5;
		case 's':
			return 0.25;
		default:
			return 0.0;
	}
};
var _user$project$Main$model = {
	initialNotes: '',
	notesToSend: {ctor: '[]'}
};
var _user$project$Main$Model = F2(
	function (a, b) {
		return {initialNotes: a, notesToSend: b};
	});
var _user$project$Main$Note = F3(
	function (a, b, c) {
		return {noteName: a, noteDuration: b, octave: c};
	});
var _user$project$Main$noteSorter = function (string) {
	var _p3 = _elm_lang$core$String$length(string);
	switch (_p3) {
		case 3:
			return A3(
				_user$project$Main$Note,
				A3(_elm_lang$core$String$slice, 0, 1, string),
				A3(_elm_lang$core$String$slice, 1, 2, string),
				A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toFloat(
						A3(_elm_lang$core$String$slice, 2, 3, string))));
		case 4:
			return A3(
				_user$project$Main$Note,
				A3(_elm_lang$core$String$slice, 0, 2, string),
				A3(_elm_lang$core$String$slice, 2, 3, string),
				A2(
					_elm_lang$core$Result$withDefault,
					0,
					_elm_lang$core$String$toFloat(
						A3(_elm_lang$core$String$slice, 3, 4, string))));
		default:
			return A3(_user$project$Main$Note, 'x', 'x', 0.0);
	}
};
var _user$project$Main$parseNotes = function (string) {
	return A2(
		_elm_lang$core$List$map,
		_user$project$Main$noteSorter,
		A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.match;
			},
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('([a-g,r]+#|[a-g,r])([whqes])(\\d)'),
				_elm_lang$core$String$toLower(string))));
};
var _user$project$Main$update = F2(
	function (msg, model) {
		var _p4 = msg;
		if (_p4.ctor === 'AcceptNotes') {
			return _elm_lang$core$Native_Utils.update(
				model,
				{initialNotes: _p4._0});
		} else {
			return _elm_lang$core$Native_Utils.update(
				model,
				{
					notesToSend: _user$project$Main$parseNotes(model.initialNotes)
				});
		}
	});
var _user$project$Main$SendNotes = {ctor: 'SendNotes'};
var _user$project$Main$AcceptNotes = function (a) {
	return {ctor: 'AcceptNotes', _0: a};
};
var _user$project$Main$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		{
			ctor: '::',
			_0: _elm_lang$html$Html_Attributes$style(
				{
					ctor: '::',
					_0: {ctor: '_Tuple2', _0: 'textAlign', _1: 'center'},
					_1: {ctor: '[]'}
				}),
			_1: {ctor: '[]'}
		},
		{
			ctor: '::',
			_0: A2(
				_elm_lang$html$Html$h1,
				{
					ctor: '::',
					_0: _elm_lang$html$Html_Attributes$style(
						{
							ctor: '::',
							_0: {ctor: '_Tuple2', _0: 'textDecoration', _1: 'underline'},
							_1: {ctor: '[]'}
						}),
					_1: {ctor: '[]'}
				},
				{
					ctor: '::',
					_0: _elm_lang$html$Html$text('COUNTERPOINT.ELM'),
					_1: {ctor: '[]'}
				}),
			_1: {
				ctor: '::',
				_0: A2(
					_elm_lang$html$Html$input,
					{
						ctor: '::',
						_0: _elm_lang$html$Html_Attributes$type_('text'),
						_1: {
							ctor: '::',
							_0: _elm_lang$html$Html_Attributes$placeholder('Enter notes to play'),
							_1: {
								ctor: '::',
								_0: _elm_lang$html$Html_Attributes$value(model.initialNotes),
								_1: {
									ctor: '::',
									_0: _elm_lang$html$Html_Events$onInput(_user$project$Main$AcceptNotes),
									_1: {
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin', _1: ' 3rem 20px'},
												_1: {
													ctor: '::',
													_0: {ctor: '_Tuple2', _0: 'width', _1: '80%'},
													_1: {
														ctor: '::',
														_0: {ctor: '_Tuple2', _0: 'textTransform', _1: 'uppercase'},
														_1: {ctor: '[]'}
													}
												}
											}),
										_1: {ctor: '[]'}
									}
								}
							}
						}
					},
					{ctor: '[]'}),
				_1: {
					ctor: '::',
					_0: A2(
						_elm_lang$html$Html$button,
						{
							ctor: '::',
							_0: _elm_lang$html$Html_Events$onClick(_user$project$Main$SendNotes),
							_1: {ctor: '[]'}
						},
						{
							ctor: '::',
							_0: _elm_lang$html$Html$text('Play Notes'),
							_1: {ctor: '[]'}
						}),
					_1: {
						ctor: '::',
						_0: A2(
							_elm_lang$html$Html$div,
							{ctor: '[]'},
							{
								ctor: '::',
								_0: _elm_lang$html$Html$text('NOTES TO BE PLAYED'),
								_1: {ctor: '[]'}
							}),
						_1: {
							ctor: '::',
							_0: A2(
								_elm_lang$html$Html$div,
								{
									ctor: '::',
									_0: _elm_lang$html$Html_Attributes$style(
										{
											ctor: '::',
											_0: {ctor: '_Tuple2', _0: 'color', _1: 'red'},
											_1: {
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'fontSize', _1: '0.75 rem'},
												_1: {ctor: '[]'}
											}
										}),
									_1: {ctor: '[]'}
								},
								{
									ctor: '::',
									_0: _elm_lang$html$Html$text(
										_elm_lang$core$Basics$toString(
											_user$project$Main$parseNotes(model.initialNotes))),
									_1: {ctor: '[]'}
								}),
							_1: {
								ctor: '::',
								_0: A2(
									_elm_lang$html$Html$div,
									{
										ctor: '::',
										_0: _elm_lang$html$Html_Attributes$style(
											{
												ctor: '::',
												_0: {ctor: '_Tuple2', _0: 'margin', _1: '1rem auto'},
												_1: {ctor: '[]'}
											}),
										_1: {ctor: '[]'}
									},
									{
										ctor: '::',
										_0: _user$project$Main$instructions,
										_1: {ctor: '[]'}
									}),
								_1: {ctor: '[]'}
							}
						}
					}
				}
			}
		});
};
var _user$project$Main$main = _elm_lang$html$Html$beginnerProgram(
	{model: _user$project$Main$model, update: _user$project$Main$update, view: _user$project$Main$view})();
